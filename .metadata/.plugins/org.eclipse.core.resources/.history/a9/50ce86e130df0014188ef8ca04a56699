package maxcity;

import java.util.*;

class Graph{
	
	private Map<String, List<String>> edges = new HashMap<String, List<String>>();
	
	public void addEdge (String v1, String v2){
		
		List<String> neighbors1 = this.edges.get(v1);
		if(neighbors1==null){
			this.edges.put(v1, neighbors1=new ArrayList<String>());
		}
		neighbors1.add(v2);
		
		List<String> neighbors2 = this.edges.get(v2);
		if(neighbors2==null){
			this.edges.put(v2, neighbors2=new ArrayList<String>());
		}
		neighbors2.add(v1);
	}
	
	public Iterable<String> getNeighbors(String v){
		List<String> neighbors = this.edges.get(v);
		return neighbors;
	}
}

class dfs{
	
	private Deque<Iterator<String>> stack = new LinkedList<Iterator<String>>();
	private Set<String> visited = new HashSet<String>();
	private Graph graph;
	private String next;
	
	
	dfs(Graph g, String Vertex){
		this.stack.push(g.getNeighbors(Vertex).iterator());
		this.graph =g;
		this.next = Vertex;
	}
	
	public boolean hasNext(){
		return this.next !=null;
	}
	
	public String next(){
		
		try{
			this.visited.add(this.next);
			return this.next;
		}finally{
			this.advance();
		}
	}
	
	private void advance(){
		Iterator<String> neighbors = this.stack.peek();
		do{
			while (!neighbors.hasNext()){
				stack.pop();
			}
		}while (this.visited.contains(next));
	}
}
public class maxcity {
	
}

